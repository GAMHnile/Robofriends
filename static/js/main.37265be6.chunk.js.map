{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbar.js","components/Scroll.js","components/Errorboundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","src","height","width","alt","Cardlist","robot","robotArray","map","use","i","key","Searchbar","onLiveSearch","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","ErrorBoundary","state","errorFound","error","info","this","setState","Component","App","event","searchfield","target","value","robots","fetch","then","list","json","users","length","filterList","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAoBeA,EAhBF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,MACxB,OACC,yBAAKC,UAAU,oDACd,yBAAKC,IAAG,mCAA8BH,EAA9B,YAA4CI,OAAO,QAAQC,MAAM,QAASC,IAAI,UACtF,6BACC,4BAAKP,GACL,2BAAIE,MCeOM,EApBC,SAAC,GAAW,IAAVC,EAAS,EAATA,MACXC,EAAaD,EAAME,KAAI,SAACC,EAAKC,GAClC,OAAO,kBAAC,EAAD,CAAMb,KAAMS,EAAMI,GAAGb,KAAMc,IAAKL,EAAMI,GAAGZ,GAAIA,GAAIQ,EAAMI,GAAGZ,GAAIC,MAAOO,EAAMI,GAAGX,WAOtF,OAGC,6BACEQ,ICJWK,EAXG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACnB,OACC,yBAAKb,UAAU,IACd,2BAAOc,KAAK,SAASd,UAAU,sCAAsCe,YAAY,gBAAgBC,SAAUH,MCO/FI,G,MAXA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBnB,OAAO,UAClEgB,EAAMI,YCwBKC,E,YAzBd,WAAYL,GAAO,IAAD,8BACjB,4CAAMA,KACDM,MAAQ,CAACC,YAAY,GAFT,E,+EAKAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,YAAY,M,+BAK3B,OAAGG,KAAKJ,MAAMC,WACN,0DAGAG,KAAKV,MAAMI,a,GAhBOQ,aC+CbC,E,YAzCd,aAAc,IAAD,8BACZ,+CAYDlB,aAAa,SAACmB,GACb,EAAKH,SAAS,CAACI,YAAaD,EAAME,OAAOC,SAZzC,EAAKX,MAAQ,CAACY,OAAQ,GACrBH,YAAY,IAHD,E,iFAMO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACO,OAAQK,S,+BAO9B,IAAD,EACwBb,KAAKJ,MAA5BY,EADD,EACCA,OAAQH,EADT,EACSA,YAEhB,GAAKG,EAAOM,OAGR,CACJ,IAAMC,EAAaP,EAAOQ,QAAO,SAAAtC,GAChC,OAAOA,EAAMT,KAAKgD,cAAcC,SAASb,EAAYY,kBAEtD,OACC,yBAAK7C,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWa,aAAce,KAAKf,eAC7B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUP,MAAOqC,OAZpB,OAAO,2C,GArBQb,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MACfC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.37265be6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Card = ({name, id, email})=> {\r\n\treturn(\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t <img src={`https://robohash.org/test${id}?200x200`} height='400px' width='300px'  alt='robot' />\r\n\t\t <div>\r\n\t\t \t<h2>{name}</h2>\r\n\t\t \t<p>{email}</p>\r\n\t\t </div>\r\n\t\t</div>\r\n\r\n\r\n\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\n\r\n\r\nconst Cardlist= ({robot})=>{\r\n\tconst robotArray = robot.map((use, i)=>{\r\n\t\treturn <Card name={robot[i].name} key={robot[i].id} id={robot[i].id} email={robot[i].email} />}\r\n\t);\r\n\r\n\t// if (true){\r\n\t// \tthrow new Error('Noooooooooo')\r\n\t// }\r\n\r\n\treturn(\r\n\r\n\r\n\t\t<div>\r\n\t\t\t{robotArray}\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n\r\nconst Searchbar = ({onLiveSearch})=>{\r\n\treturn(\r\n\t\t<div className=''>\r\n\t\t\t<input type='search' className='tc pa3 ba b--green bg-lightest-blue' placeholder='Search Robots' onChange={onLiveSearch} />\r\n\t\t</div>\r\n\r\n\t\t\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Searchbar;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height:'800px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\r\n\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {errorFound: false}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({errorFound: true})\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tif(this.state.errorFound){\r\n\t\t\treturn <h1>Ooops Something went wrong</h1>\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn this.props.children\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundary","import React, {Component} from 'react';\r\nimport Cardlist from '../components/Cardlist.js';\r\n// import {robots} from '../robots.js';\r\nimport Searchbar from '../components/Searchbar.js';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundary from '../components/Errorboundary.js'\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {robots: [],\r\n\t\t\tsearchfield:''}\r\n\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(list => list.json())\r\n\t\t.then(users => this.setState({robots: users}));\r\n\t}\r\n\r\n\r\n\tonLiveSearch=(event)=>{\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t}\r\n\trender(){\r\n\t\tconst { robots, searchfield} = this.state;\r\n\r\n\t\tif (!robots.length){\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t}\r\n\t\telse{\r\n\t\tconst filterList = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn(\r\n\t\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'>Robofriends</h1>\r\n\t\t\t<Searchbar onLiveSearch={this.onLiveSearch}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<Cardlist robot={filterList}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);}\r\n\t}\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons'\n// import Cardlist from './components/Cardlist.js'\nimport App from './containers/App.js'\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App /> , \n\tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}